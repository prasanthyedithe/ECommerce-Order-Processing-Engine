version: "3"
services:
    db:
        image: postgres
        volumes:
        - postgres-data:/var/lib/postgresql/data
        ports:
        - 8001:5432
        environment:
            - POSTGRES_PASSWORD=admin
            - POSTGRES_USER=postgres
            - POSTGRES_DB=testdb
        restart: unless-stopped

    order-service:
        build: order-service/.
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/testdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: admin
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
        depends_on:
        - "db"
        - "kafka"
        - "discovery-service"
    discovery-service:
        build: discovery-service/.
        ports: 
        - "8761:8761"
        environment:
            SERVER_PORT: 8761
    item-service:
        build: item-service/.
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/testdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: admin
            SERVER_PORT: 8080
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
        depends_on:
            - "db"
            - "kafka"
            - "discovery-service"
    customer-service:
        build: customer-service/.
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/testdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: admin
            SERVER_PORT: 8080
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
        depends_on:
            - "db"
            - "kafka"
            - "discovery-service"
    address-service:
        build: address-service/.
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/testdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: admin
            SERVER_PORT: 8080
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
        depends_on:
            - "db"
            - "kafka"
            - "discovery-service"
    payment-method-service:
        build: payment-method-service/.
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/testdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: admin
            SERVER_PORT: 8080
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
        depends_on:
            - "db"
            - "kafka"
            - "discovery-service"
    api-gateway:
        build: api-gateway/.
        ports: 
            - "8080:8080"
        environment:
            SERVER_PORT: 8080
            SERVICE_URL_DEFAULT_ZONE: http://discovery-service:8761/eureka/
            SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            KAFKA_TOPIC_ORDER: order_batch
            KAFKA_TOPIC_ORDERSTATUS: order_batch_status
        depends_on:
            - "db"
            - "kafka"
            - "discovery-service"
    pgadmin:
        image: dpage/pgadmin4:4.18
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: dc297@dc297.io
            PGADMIN_DEFAULT_PASSWORD: dc297
            PGADMIN_LISTEN_PORT: 80
        ports:
        - "5000:80"
        volumes:
        - pgadmin-data:/var/lib/pgadmin
    kafka:
        image: spotify/kafka
        ports:
        - "2181:2181"
        - "9092:9092"
        hostname: kafka
        container_name: kafka
        environment:
        - "ADVERTISED_HOST=kafka"
        - "ADVERTISED_PORT=9092"
        - "AUTO_CREATE_TOPICS=true"
        command: >
            bash -c
            "(sleep 15s &&
            /opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh
            --create
            --zookeeper
            localhost:2181 --replication-factor 1 --partitions 1
            --topic order_batch &) && 
            (/opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh
            --create
            --zookeeper
            localhost:2181 --replication-factor 1 --partitions 1
            --topic order_batch_status &) && (supervisord -n)"
volumes:
    postgres-data:
    pgadmin-data: